name: Build Test Artifacts for Branches

on:
  push:
    branches-ignore: [ master, main, develop ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'gradle/**'
      - 'axway-versions.json'
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Axway version to build'
        required: false
        default: '7.7.0.20240830'
        type: string

jobs:
  build-test-artifacts:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Parse versions
      id: versions
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          echo "versions=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          versions=$(jq -r '.versions | keys[]' axway-versions.json | tr '\n' ',' | sed 's/,$//')
          echo "versions=$versions" >> $GITHUB_OUTPUT
        fi
        echo "📋 Versions to build: ${{ steps.versions.outputs.versions }}"

    - name: Build for each version
      id: build
      run: |
        echo "🔍 Running semantic versioning..."
        chmod +x scripts/version-bump.sh
        ./scripts/version-bump.sh

        if [ -f ".version_info" ]; then
          source .version_info
          echo "📋 Calculated version: $NEW_VERSION ($VERSION_TYPE)"
          RELEASE_VERSION="$NEW_VERSION"
        else
          echo "⚠️  .version_info file not found, using current version"
          RELEASE_VERSION=$(grep -o "version = '[^']*'" build.gradle | cut -d"'" -f2)
        fi

        echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
        VERSIONS="${{ steps.versions.outputs.versions }}"

        for VERSION in ${VERSIONS//,/ }; do
          echo "🔧 Build for version: $VERSION"
          VERSION_INFO=$(jq -r ".versions[\"$VERSION\"]" axway-versions.json)
          DOCKER_IMAGE=$(echo "$VERSION_INFO" | jq -r '.docker_image')
          BASE_PATH=$(echo "$VERSION_INFO" | jq -r '.base_path')

          docker run --rm \
            -v "$(pwd):/workspace" \
            -w /workspace \
            "$DOCKER_IMAGE" \
            gradle -Daxway.base="$BASE_PATH" clean build copyExternalDependencies listDependencies

          JAR_FILE=$(find build/libs -name "*.jar" | head -1)
          if [ -n "$JAR_FILE" ]; then
            echo "✅ JAR created for $VERSION: $JAR_FILE"
          else
            echo "❌ JAR not found for $VERSION"; exit 1
          fi
        done

    - name: Create Versioned Test ZIPs
      run: |
        RELEASE_VERSION="${{ steps.build.outputs.release_version }}"
        [ -z "$RELEASE_VERSION" ] && RELEASE_VERSION=$(grep -o "version = '[^']*'" build.gradle | cut -d"'" -f2)
        [ -z "$RELEASE_VERSION" ] && RELEASE_VERSION="1.0.0"
        BRANCH_NAME=${GITHUB_REF#refs/heads/}
        BRANCH_NAME=${BRANCH_NAME//\//-}
        VERSIONS="${{ steps.versions.outputs.versions }}"
        RELEASE_DATE=$(date +%Y%m%d-%H%M%S)
        for VERSION in ${VERSIONS//,/ }; do
          ZIP_DIR="policy-loop-apim-sdk-${RELEASE_VERSION}-${VERSION}-${BRANCH_NAME}-${RELEASE_DATE}"
          mkdir -p "$ZIP_DIR"
          BUILD_JAR=$(find build/libs -name "*.jar" | head -1)
          [ -n "$BUILD_JAR" ] && cp "$BUILD_JAR" "$ZIP_DIR/"
          [ -f "scripts/install-linux.sh" ] && cp scripts/install-linux.sh "$ZIP_DIR/"
          [ -f "gradlew" ] && cp gradlew "$ZIP_DIR/"
          [ -f "gradlew.bat" ] && cp gradlew.bat "$ZIP_DIR/"
          [ -f "build.gradle" ] && cp build.gradle "$ZIP_DIR/"
          [ -d "gradle" ] && cp -r gradle "$ZIP_DIR/"
          if [ -d "src/main/resources/fed" ]; then
            mkdir -p "$ZIP_DIR/src/main/resources/fed"
            cp -r src/main/resources/fed/* "$ZIP_DIR/src/main/resources/fed/"
          fi
          if [ -d "src/main/resources/yaml" ]; then
            mkdir -p "$ZIP_DIR/src/main/resources/yaml"
            cp -r src/main/resources/yaml/* "$ZIP_DIR/src/main/resources/yaml/"
          fi
          mkdir -p "$ZIP_DIR/dependencies"
          if [ -d "dependencies" ] && [ "$(ls -A dependencies 2>/dev/null)" ]; then
            cp -r dependencies/* "$ZIP_DIR/dependencies/" 2>/dev/null || true
          else
            AWS_JARS=$(find build/libs -name "*aws-java-sdk-*" -type f 2>/dev/null)
            if [ -n "$AWS_JARS" ]; then for J in $AWS_JARS; do cp "$J" "$ZIP_DIR/dependencies/"; done; fi
          fi
          echo "# Policy Loop APIM SDK - TEST BUILD" > "$ZIP_DIR/README.md"
          echo "Branch: $BRANCH_NAME" >> "$ZIP_DIR/README.md"
          ZIP_NAME="policy-loop-apim-sdk-${RELEASE_VERSION}-${VERSION}-${BRANCH_NAME}-${RELEASE_DATE}-TEST.zip"
          zip -r "$ZIP_NAME" "$ZIP_DIR/"
          rm -rf "$ZIP_DIR"
        done

    - name: Sanitize branch name
      run: |
        BRANCH_NAME_SANITIZED=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
        echo "BRANCH_NAME_SANITIZED=$BRANCH_NAME_SANITIZED" >> $GITHUB_ENV

    - name: Upload Test Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts-${{ env.BRANCH_NAME_SANITIZED }}
        path: policy-loop-apim-sdk-*-TEST.zip
        retention-days: 7

