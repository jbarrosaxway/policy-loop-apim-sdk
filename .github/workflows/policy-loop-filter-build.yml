name: Policy Loop Filter - Build & Test

on:
  push:
    branches: [ master, main, develop ]
    paths:
      - 'src/**'
      - 'build.gradle'
      - 'gradle/**'
      - 'axway-versions.json'
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Axway version to build'
        required: false
        default: '7.7.0.20240830'
        type: string
      build_type:
        description: 'Build type'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - jar
          - test
          - install

jobs:
  build-policy-loop-filter:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '7.6'

    - name: Parse versions
      id: versions
      run: |
        if [ "${{ github.event.inputs.version }}" != "" ]; then
          echo "versions=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          versions=$(jq -r '.versions | keys[]' axway-versions.json | tr '\n' ',' | sed 's/,$//')
          echo "versions=$versions" >> $GITHUB_OUTPUT
        fi
        echo "üìã Versions to build: ${{ steps.versions.outputs.versions }}"

    - name: Show project info
      run: |
        echo "üîç Project information:"
        ./gradlew showProjectInfo

    - name: List dependencies
      run: |
        echo "üìã Dependencies:"
        ./gradlew listDependencies

    - name: Build for each version
      id: build
      run: |
        echo "üîç Running semantic versioning..."
        chmod +x scripts/version-bump.sh
        ./scripts/version-bump.sh

        if [ -f ".version_info" ]; then
          source .version_info
          echo "üìã Calculated version: $NEW_VERSION ($VERSION_TYPE)"
          RELEASE_VERSION="$NEW_VERSION"
        else
          echo "‚ö†Ô∏è  .version_info file not found, using current version"
          RELEASE_VERSION=$(grep -o "version = '[^']*'" build.gradle | cut -d"'" -f2)
        fi

        echo "release_version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
        VERSIONS="${{ steps.versions.outputs.versions }}"

        for VERSION in ${VERSIONS//,/ }; do
          echo "üîß Build for version: $VERSION"
          VERSION_INFO=$(jq -r ".versions[\"$VERSION\"]" axway-versions.json)
          BASE_PATH=$(echo "$VERSION_INFO" | jq -r '.base_path')

          echo "üìÅ Building with Axway base: $BASE_PATH"
          ./gradlew -Daxway.base="$BASE_PATH" clean build copyExternalDependencies

          JAR_FILE=$(find build/libs -name "*.jar" | head -1)
          if [ -n "$JAR_FILE" ]; then
            echo "‚úÖ JAR created for $VERSION: $JAR_FILE"
            echo "üìè Size: $(du -h "$JAR_FILE" | cut -f1)"
          else
            echo "‚ùå JAR not found for $VERSION"
            exit 1
          fi
        done

    - name: Create Release Artifacts
      run: |
        RELEASE_VERSION="${{ steps.build.outputs.release_version }}"
        [ -z "$RELEASE_VERSION" ] && RELEASE_VERSION=$(grep -o "version = '[^']*'" build.gradle | cut -d"'" -f2)
        [ -z "$RELEASE_VERSION" ] && RELEASE_VERSION="1.0.0"

        VERSIONS="${{ steps.versions.outputs.versions }}"
        RELEASE_DATE=$(date +%Y%m%d-%H%M%S)

        echo "üì¶ Creating release artifacts for version: $RELEASE_VERSION"

        for VERSION in ${VERSIONS//,/ }; do
          echo "üì¶ Creating package for $VERSION"
          
          # Create version-specific directory
          PACKAGE_DIR="policy-loop-filter-${RELEASE_VERSION}-${VERSION}-${RELEASE_DATE}"
          mkdir -p "$PACKAGE_DIR"
          
          # Copy JAR
          cp build/libs/*.jar "$PACKAGE_DIR/"
          
          # Copy YAML files
          mkdir -p "$PACKAGE_DIR/yaml"
          cp -r src/main/resources/yaml/* "$PACKAGE_DIR/yaml/"
          
          # Copy scripts
          mkdir -p "$PACKAGE_DIR/scripts"
          cp scripts/linux/install-filter.sh "$PACKAGE_DIR/scripts/"
          chmod +x "$PACKAGE_DIR/scripts/install-filter.sh"
          
          # Copy documentation
          cp README.md "$PACKAGE_DIR/"
          cp LICENSE "$PACKAGE_DIR/"
          cp axway-versions.json "$PACKAGE_DIR/"
          
          # Create ZIP
          zip -r "${PACKAGE_DIR}.zip" "$PACKAGE_DIR"
          
          echo "‚úÖ Package created: ${PACKAGE_DIR}.zip"
        done

    - name: Upload Release Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: policy-loop-filter-artifacts
        path: |
          policy-loop-filter-*.zip
          build/libs/*.jar
        retention-days: 30

    - name: Create Release
      if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.build.outputs.release_version }}
        name: Policy Loop Filter v${{ steps.build.outputs.release_version }}
        body: |
          ## Policy Loop Filter v${{ steps.build.outputs.release_version }}
          
          ### üöÄ New Features
          - Enhanced build system following AWS Lambda APIM SDK pattern
          - Multi-version Axway support
          - Automated installation scripts
          - Improved error handling and logging
          
          ### üìã Supported Axway Versions
          ${{ steps.versions.outputs.versions }}
          
          ### üì¶ Installation
          ```bash
          # Linux
          ./gradlew installLinux
          
          # Windows
          ./gradlew -Dproject.path=/path/to/project installWindowsToProject
          ```
          
          ### üîß Configuration
          ```bash
          # Set Axway base path
          -Daxway.base=/opt/axway/Axway-7.7.0.20240830
          ```
          
          ### üìÅ Files Included
          - JAR file for API Gateway
          - YAML configuration files
          - Installation scripts
          - Documentation
          
          ### üêõ Bug Fixes
          - Fixed malformed try-catch block in CircuitLoopFilter.java
          - Improved dependency management
          - Enhanced error messages
          
          ### üìù Changelog
          See [CHANGELOG.md](CHANGELOG.md) for detailed changes.
        draft: false
        prerelease: false
        files: |
          policy-loop-filter-*.zip
        token: ${{ secrets.GITHUB_TOKEN }}

  test-policy-loop-filter:
    runs-on: ubuntu-latest
    needs: build-policy-loop-filter
    if: github.event.inputs.build_type == 'test' || github.event.inputs.build_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '7.6'

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: policy-loop-filter-artifacts
        path: artifacts/

    - name: Test installation
      run: |
        echo "üß™ Testing installation..."
        
        # Test JAR file
        JAR_FILE=$(find artifacts -name "*.jar" | head -1)
        if [ -n "$JAR_FILE" ]; then
          echo "‚úÖ JAR file found: $JAR_FILE"
          echo "üìè Size: $(du -h "$JAR_FILE" | cut -f1)"
          
          # Test JAR contents
          jar tf "$JAR_FILE" | head -20
        else
          echo "‚ùå JAR file not found"
          exit 1
        fi
        
        # Test YAML files
        if [ -d "artifacts/yaml" ]; then
          echo "‚úÖ YAML files found"
          find artifacts/yaml -type f -name "*.yaml" | head -10
        else
          echo "‚ùå YAML files not found"
          exit 1
        fi
        
        echo "üéâ All tests passed!"

  install-policy-loop-filter:
    runs-on: ubuntu-latest
    needs: build-policy-loop-filter
    if: github.event.inputs.build_type == 'install' || github.event.inputs.build_type == 'all'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Java
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '7.6'

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: policy-loop-filter-artifacts
        path: artifacts/

    - name: Test installation scripts
      run: |
        echo "üîß Testing installation scripts..."
        
        # Test Linux installation script
        if [ -f "scripts/linux/install-filter.sh" ]; then
          echo "‚úÖ Linux installation script found"
          chmod +x scripts/linux/install-filter.sh
          
          # Test script syntax
          bash -n scripts/linux/install-filter.sh
          echo "‚úÖ Linux script syntax OK"
        else
          echo "‚ùå Linux installation script not found"
          exit 1
        fi
        
        echo "üéâ Installation scripts test passed!"
